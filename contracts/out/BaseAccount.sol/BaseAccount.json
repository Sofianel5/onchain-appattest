{"abi":[{"type":"function","name":"entryPoint","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IEntryPoint"}],"stateMutability":"view"},{"type":"function","name":"getNonce","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"validateUserOp","inputs":[{"name":"userOp","type":"tuple","internalType":"struct UserOperation","components":[{"name":"sender","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"callData","type":"bytes","internalType":"bytes"},{"name":"callGasLimit","type":"uint256","internalType":"uint256"},{"name":"verificationGasLimit","type":"uint256","internalType":"uint256"},{"name":"preVerificationGas","type":"uint256","internalType":"uint256"},{"name":"maxFeePerGas","type":"uint256","internalType":"uint256"},{"name":"maxPriorityFeePerGas","type":"uint256","internalType":"uint256"},{"name":"paymasterAndData","type":"bytes","internalType":"bytes"},{"name":"signature","type":"bytes","internalType":"bytes"}]},{"name":"userOpHash","type":"bytes32","internalType":"bytes32"},{"name":"missingAccountFunds","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"validationData","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"entryPoint()":"b0d691fe","getNonce()":"d087d288","validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":"3a871cdd"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"entryPoint()\":{\"notice\":\"return the entryPoint used by this account. subclass should return the current entryPoint used by this account.\"},\"getNonce()\":{\"notice\":\"Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\"},\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"notice\":\"Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\"}},\"notice\":\"Basic account implementation. this contract provides the basic logic for implementing the IAccount interface  - validateUserOp specific account implementation should inherit it and provide the account-specific logic\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/core/BaseAccount.sol\":\"BaseAccount\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/core/BaseAccount.sol\":{\"keccak256\":\"0x20066422a42ad073d567002277051e6a7b16c8b5d9e67b9b48945cdcbb26fdf0\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://66f6b4e93ff5cb9154649261d33d2a12877f9d8f92c071768000adfdc7426860\",\"dweb:/ipfs/QmYTqqhJgZ4goV3ykGu5wksLZH64S1Ys72KQF8ZssiRbjV\"]},\"src/core/Helpers.sol\":{\"keccak256\":\"0x6e50cae69e33e578f3d5a0e110892d26e7b1269cdd96ca3033d4e57b3ce8bf84\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://45294a1d42448021a042fe7c3db3e7882ddde003caf79ce0190ceb4889c8b228\",\"dweb:/ipfs/QmTGVbwDmJJQC2b2k64G9hoVnFn5emQBEgNsJXb4trdupz\"]},\"src/interfaces/IAccount.sol\":{\"keccak256\":\"0xcbc4b0973cf954c5895b7796335f651fbfcfb55f67dfa789a3d354f8e23c4f2b\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://f7f47b95743e807c0d0addd7fd34c080d5e66d144b4a37116c0c9f0bac921a07\",\"dweb:/ipfs/QmZWozBA9d24ZvKPNHGBfBTAKD4TwaWErgcMfY2EqBcma7\"]},\"src/interfaces/IAggregator.sol\":{\"keccak256\":\"0xdfdcd80568f037716674619b31be630fcd8316262f05a815b41d1e81782c966a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://3db3545e68657b191a6a7094e5a21a4d36e7c0097e58095432fc35acbeeefe96\",\"dweb:/ipfs/QmRqFFjjxEiFaAtY7X8hWyNRHdKCUQ2MhTXg3LmXckdBqh\"]},\"src/interfaces/IEntryPoint.sol\":{\"keccak256\":\"0x9ccb1b188eda8bbf5f6c2d01bd83c3d8b2b04fcf745283051d31fe96d1d8e40f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://7d5544d55a9d431dd6f5f5f005016125ec73c051d9a8cfc14fc9e9e1b2d8022b\",\"dweb:/ipfs/QmfMBmZXh7Yz4veYaUFoipbWF5oqkFFcWdmC5kvV5U42Qq\"]},\"src/interfaces/INonceManager.sol\":{\"keccak256\":\"0xce478ad0fa0d18a3b785ac854623029e7ab463d05873dfaa365abfa1bf100912\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://a0b8bb093d63cf6a4241f57d11ff4d27658269032c93249c346792b6cefd13af\",\"dweb:/ipfs/QmbrgtzFfjFHq9j5uMQacFYCXycNGpYTyJiggfix9Nu4cg\"]},\"src/interfaces/IStakeManager.sol\":{\"keccak256\":\"0xadcea606c9b7aafe6645441f2154a60f271330b0eee5292a632aa71c1672d546\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://951d649ae7cf79092a892412a94e127d5a6c9fc953c6767add3e50dd3f63cefa\",\"dweb:/ipfs/QmcHqiig1asvYqYdCrN8Kg8wGNjr4b4H71GnysFfEtppqw\"]},\"src/interfaces/UserOperation.sol\":{\"keccak256\":\"0x2429f5cc546bdee08c7e63858d0dda8491eaa3ab5194df884dc948c1154d2834\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://ce19b42600be3eaab054db6dac0ba530c895f59bda4c3df367c670f1581dee58\",\"dweb:/ipfs/QmcQ2qLmX5ghdsz3fp1PsACkZLkhVsb2E45685DGpAYyWb\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"entryPoint","outputs":[{"internalType":"contract IEntryPoint","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"struct UserOperation","name":"userOp","type":"tuple","components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}]},{"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"internalType":"uint256","name":"missingAccountFunds","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"validateUserOp","outputs":[{"internalType":"uint256","name":"validationData","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{"entryPoint()":{"notice":"return the entryPoint used by this account. subclass should return the current entryPoint used by this account."},"getNonce()":{"notice":"Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`"},"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":{"notice":"Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods."}},"version":1}},"settings":{"remappings":["@openzeppelin/=lib/openzeppelin-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/core/BaseAccount.sol":"BaseAccount"},"evmVersion":"paris","libraries":{}},"sources":{"src/core/BaseAccount.sol":{"keccak256":"0x20066422a42ad073d567002277051e6a7b16c8b5d9e67b9b48945cdcbb26fdf0","urls":["bzz-raw://66f6b4e93ff5cb9154649261d33d2a12877f9d8f92c071768000adfdc7426860","dweb:/ipfs/QmYTqqhJgZ4goV3ykGu5wksLZH64S1Ys72KQF8ZssiRbjV"],"license":"GPL-3.0"},"src/core/Helpers.sol":{"keccak256":"0x6e50cae69e33e578f3d5a0e110892d26e7b1269cdd96ca3033d4e57b3ce8bf84","urls":["bzz-raw://45294a1d42448021a042fe7c3db3e7882ddde003caf79ce0190ceb4889c8b228","dweb:/ipfs/QmTGVbwDmJJQC2b2k64G9hoVnFn5emQBEgNsJXb4trdupz"],"license":"GPL-3.0"},"src/interfaces/IAccount.sol":{"keccak256":"0xcbc4b0973cf954c5895b7796335f651fbfcfb55f67dfa789a3d354f8e23c4f2b","urls":["bzz-raw://f7f47b95743e807c0d0addd7fd34c080d5e66d144b4a37116c0c9f0bac921a07","dweb:/ipfs/QmZWozBA9d24ZvKPNHGBfBTAKD4TwaWErgcMfY2EqBcma7"],"license":"GPL-3.0"},"src/interfaces/IAggregator.sol":{"keccak256":"0xdfdcd80568f037716674619b31be630fcd8316262f05a815b41d1e81782c966a","urls":["bzz-raw://3db3545e68657b191a6a7094e5a21a4d36e7c0097e58095432fc35acbeeefe96","dweb:/ipfs/QmRqFFjjxEiFaAtY7X8hWyNRHdKCUQ2MhTXg3LmXckdBqh"],"license":"GPL-3.0"},"src/interfaces/IEntryPoint.sol":{"keccak256":"0x9ccb1b188eda8bbf5f6c2d01bd83c3d8b2b04fcf745283051d31fe96d1d8e40f","urls":["bzz-raw://7d5544d55a9d431dd6f5f5f005016125ec73c051d9a8cfc14fc9e9e1b2d8022b","dweb:/ipfs/QmfMBmZXh7Yz4veYaUFoipbWF5oqkFFcWdmC5kvV5U42Qq"],"license":"GPL-3.0"},"src/interfaces/INonceManager.sol":{"keccak256":"0xce478ad0fa0d18a3b785ac854623029e7ab463d05873dfaa365abfa1bf100912","urls":["bzz-raw://a0b8bb093d63cf6a4241f57d11ff4d27658269032c93249c346792b6cefd13af","dweb:/ipfs/QmbrgtzFfjFHq9j5uMQacFYCXycNGpYTyJiggfix9Nu4cg"],"license":"GPL-3.0"},"src/interfaces/IStakeManager.sol":{"keccak256":"0xadcea606c9b7aafe6645441f2154a60f271330b0eee5292a632aa71c1672d546","urls":["bzz-raw://951d649ae7cf79092a892412a94e127d5a6c9fc953c6767add3e50dd3f63cefa","dweb:/ipfs/QmcHqiig1asvYqYdCrN8Kg8wGNjr4b4H71GnysFfEtppqw"],"license":"GPL-3.0-only"},"src/interfaces/UserOperation.sol":{"keccak256":"0x2429f5cc546bdee08c7e63858d0dda8491eaa3ab5194df884dc948c1154d2834","urls":["bzz-raw://ce19b42600be3eaab054db6dac0ba530c895f59bda4c3df367c670f1581dee58","dweb:/ipfs/QmcQ2qLmX5ghdsz3fp1PsACkZLkhVsb2E45685DGpAYyWb"],"license":"GPL-3.0"}},"version":1},"id":49}